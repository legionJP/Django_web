#1------
#sudo apt-get install apache2
#--------

# follow all the steps of the flask series depolyment till requiremtns.txt installtions : 

#in seetings.py 

ALLOWED_HOSTS = ['ip_add/or domain_name']

#static file are handeled diffrent in production 

STATIC_ROOT = os.path.join(BASE_DIR, 'static')


python manage.py collectstatic

128 static files copied to '/home/ubuntu/Django_web/mywebsite/static'.


#Using the WSGI Server on the deployement 

# in root dir 
sudo apt-get install apache2 

sudo apt-get install libapache2-mod-wsgi-py3


#configure the apache web server 

cd /etc/apache2/sites-availabable/

#copy the default conf to mywebsite.conf

sudo cp 000-default.conf mywebsite.conf


# Edit the apache2 sites availablefile
sudo nano /etc/apache2/sites-available/mywebsite.conf

.
.
.
.
.


        Alias /static /home/ubuntu/Django_web/mywebsite/static
        <Directory /home/ubuntu/Django_web/mywebsite/static>
                Require all granted
        </Directory>

        Alias /media /home/ubuntu/Django_web/mywebsite/media
        <Directory /home/ubuntu/Django_web/mywebsite/media>
                Require all granted
        </Directory>


        <Directory /home/ubuntu/Django_web/mywebsite/mywebsite>
                <Files wsgi.py>
                        Require all granted
                </Files>
        </Directory>

        WSGIScriptAlias / /home/ubuntu/Django_web/mywebsite/mywebsite/wsgi.py
        WSGIDaemonProcess django_app python-path=/home/ubuntu/Django_web/mywebsite  python-home=/home/ubuntu/Django_web/mywebsite/venv
        WSGIProcessGroup django_app

</VirtualHost>

#--------------------------------------------------------------------------
#activate the conf file of mywebsite 

sudo a2ensite mywebsite.conf


sudo a2dissite 000-default.conf
Site 000-default disabled.

To activate the new configuration, you need to run:
sudo systemctl reload apache2

#check the apachectl configtst:
sudo apachectl configtest
#----------------------------------------------------------------------------
#change the permission for the apache www data group : 

sudo chown :www-data mywebsite/db.sqlite3

sudo chown 664  db.sqlite3

sudo chown :www-data mywebsite 
sudo chmod 775 mywebsite/

sudo chown -R :www-data mywebsite/media/

sudo chown -R 775  mywebsite/media/

sudo chown -R www-data:www-data mywebsite/mywebsite


sudo chown -R www-data:www-data /home/ubuntu/Django_web/mywebsite/blog_app
sudo chown -R www-data:www-data /home/ubuntu/Django_web/mywebsite/manage.py
sudo chown -R www-data:www-data /home/ubuntu/Django_web/mywebsite/static
sudo chown -R www-data:www-data /home/ubuntu/Django_web/mywebsite/users
sudo chown -R www-data:www-data /home/ubuntu/Django_web/mywebsite/venv





#Adding the configuration file : 
sudo nano /etc/config.json

#add the {
        'SECRET_KEY':   ,
        'EMAIL_PASS':   ,
        'EMAIL_USER':  
}



import os
import json
from pathlib import Path


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config['SECRET_KEY']


with open('/etc/config.json') as config_file:
    config = json.load(config_file)

EMAIL_HOST_USER =  config.get('EMAIL_USER')
EMAIL_HOST_PASSWORD = config.get('EMAIL_PASS')



DEBUG = False


sudo service apache2 restart

#see the server log error 
sudo cat /var/log/apache2/error.log

#see the help from the Django Docs : 

https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/


#----------------------------------------------
# Get the https;  by lets encrypte 
using the Certbot :

# select the server : apache and the os version like ubuntu20 
 sudo apt-get update 
sudo apt-get install

# you need to PPA repo for the ubuntu 18 or less than ubunut 20 :

sudo snap install --classic certbot

or 

sudo apt install certbot python3-certbot-apache

#Go to following conf file and check the changes 

$ sudo nano /etc/apache2/sites-available/mywebsite-le-ssl.conf

# you can comment out he alias in this file because it is available in above file
$ sudo nano /etc/apache2/sites-available/mywebsite.conf

#remove the comment of the WSGIProcess command
$ sudo nano /etc/apache2/sites-available/mywebsite-le-ssl.conf


Test automatic renewal:
sudo certbot renew --dry-run


apachectl configtest
sudo apachectl configtest

Renew the ssl automatic : 
sudo crontab -e 

1. to chhose the nano

30 4 1 * *  sudo certbot renew --quite 

# run on 4:30 0f every  month on evry week , run on background