   #=========================== Django =================================#
 
Here you will be find out the path and guide to learn and build app using Django
#install virtual env 

pyhton -m venv myenv

#activate env :
./myenv/Scripts/activate

Django -admin 


#use the below command to create the django project in env enabled  :

django-admin startproject 'project_name' 


#seetting up the url path

#run the django app

python manage.py runserver

#for window

py manage.py runserver

#changing the port 

#default port 
py manage.py runserver 8080

#to listen on port on the network 
py manage.py runserver 0.0.0.0:8000

#===========================================================
#Creating the Polls app
#=======================================================
Django comes with a utility that automatically generates the basic directory structure of an app, 
so you can focus on writing code rather than creating directories.


#---------------------------------------------
#Project Vs app
#-----------------------------------
Project : 
 A project is a collection of configuration and apps for a particular website.
App: 
 An app is a web application that does something
  – e.g., a blog system, a database of public records or a small poll app. 

A project can contain multiple apps. An app can be in multiple projects.

To create your app, make sure you’re in the same directory as manage.py and type this command:

$ python manage.py startapp 'appname'

#window
...\> py manage.py startapp 'appname'


#==========================================================
# Templates :
#========================
blog_app -> Templates -> blog_app -> template.html

#using the template inherritance 


#====================================================#
#Creating SuperUser for the admin Page to access it 
#====================================================#
#first we have to make the db migrations to create the database where user_auth table will be created for admin data

python manage.py migrate 

#for upgrading the db changes 
python manage.py makemigrations

#create the admin superr users

python manage.py createsuperuser



#Creating Models of DB  

#after creating the models make te migrations 
python manage.py makemigrations

#Applying the migrations 
python manage.py migrate

#see the sql data of the created model in migration by migration code and app name 
#django uses ORM
python manage.py sqlmigrate blog 0001

#========================================================
#Working with models and querying it with classes :
Use the python shell to work with these models

python manage.py shell

Python 3.12.1 (tags/v3.12.1:2305ca5, Dec  7 2023, 22:03:25) [MSC v.1937 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from blog_app.models import Post
>>> from django.contrib.auth.models import User
>>> User.objects.all()
<QuerySet [<User: JP>, <User: Tester_JP>]>
>>>
<QuerySet [<User: JP>, <User: Tester_JP>]>
>>> User.objects.first()
<User: JP>
>>> User.objects.filter(username='Tester_JP')
<QuerySet [<User: Tester_JP>]>
>>> User.objects.filter(username='Tester_JP').first()
<User: Tester_JP>

#capturing the user in a variable 
user =User.objects.filter(username='Tester_JP').first() 
user.id
user.pk

user = User.objects.get(id=1)
user


#Query the Post model

Post.objects.all()
'empty quey set'

#create the post : 
 post_1 =Post(title = 'Getting Strated with Tech Mantra', content= 'guide of the website navigation and how to write the post on our website',author =user)

 #save the post:
 post_1.save()
 #query it 
 Post.objects.all()


#Note: create the dunder str method __str__() to see  descriptive query of the the model

exit()
python manage.py shell
from blog_app.models import Post
>>> from django.contrib.auth.models import User
>>> User.objects.all()

>>> user = User.objects.filter(username='JP').first()
>>> user

#create a Post_2
>>> Post_2 = Post(title = 'Getting strated with Python', content='Python roadmap, data types, OOPS , and Models',author_id =user.id)
>>> Post_2.save()
>>> Post.objects.all()
<QuerySet [<Post: Getting Strated with Tech Mantra>, <Post: Getting strated with Python>]>
>>> Post.objects.first()
<Post: Getting Strated with Tech Mantra>

#Query the post model
post = Post.objects.first()
>>> post.content
'guide of the website navigation and how to write the post on our website'
>>> post.date_posted
datetime.datetime(2024, 5, 7, 12, 47, 34, 936533, tzinfo=datetime.timezone.utc)
>>> post.author
<User: JP>
>>> post.author.email
'jjpsingh18@gmail.com'


#Getting the post By the User specific
 
>> user
<User: JP>
>>> user.post_set
<django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x0000029F6E002720>
>>> user.post_set.all()
<QuerySet [<Post: Getting Strated with Tech Mantra>, <Post: Getting strated with Python>]>
>>>

#creating the another  post  for user with post_set method 

>>> user.post_set.create(title='Intro to Django', content ='Lets leran the steps to setup django projects and routes , templates')
<Post: Intro to Django>
>>> Post.objects.all()
<QuerySet [<Post: Getting Strated with Tech Mantra>, <Post: Getting strated with Python>, <Post: Intro to Django>]>
>>>

#Adding the db data on the route to see on website app
